import java.util.*;
public class Main
{
    public static void bellman(int v,int e,int graph[][],int src)
    {
        int dist[]=new int[v];
        Arrays.fill(dist,Integer.MAX_VALUE);
        
        dist[src]=0;
        
        for(int i=0;i<v-1;i++)
        {
            for(int j=0;j<graph.length;j++)
            {
                int s=graph[j][0];
                int d=graph[j][1];
                int w=graph[j][2];
                
                if(dist[s]+w<dist[d])
                {
                    dist[d]=dist[s]+w;
                }
            }
        }
           for(int j=0;j<graph.length;j++)
            {
                int s=graph[j][0];
                int d=graph[j][1];
                int w=graph[j][2];
                
                if(dist[s]+w<dist[d])
                {
                    // dist[d]=dist[s]+w;
                    System.out.println("Negative cycle");
                }
            }
            System.out.println("vertices shortestpath");
            for(int i=0;i<v;i++)
            {
                System.out.println(i+" "+dist[i]);
            }
            
        
    }
	public static void main(String[] args) {
	  //Bellman shortest IncompatibleClassChangeError
	  int vertices=5;
	  int edges=6;
	  int graph[][]={{0,1,2},{0,2,4},{0,3,3},{2,4,-1},{2,3,0},{1,4,3}};
	  int source=0;
	  bellman(vertices,edges,graph,0);
	}
}
